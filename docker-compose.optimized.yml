# docker-compose.optimized.yml
# Optimized Docker Compose configuration for production scalability
# Includes performance optimizations, health checks, and resource limits

version: '3.9'

services:
  # ─── POSTGRESQL WITH STREAMING REPLICATION ─────────────────────────────
  
  db-primary:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./postgres/optimized-postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./postgres/init-replication.sh:/docker-entrypoint-initdb.d/init-replication.sh:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_min_duration_statement=1000
    networks:
      - backend
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  db-replica:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_MASTER_SERVICE: db-primary
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./postgres/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh:ro
    depends_on:
      db-primary:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "5433:5432"
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.3'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ─── REDIS CLUSTER ──────────────────────────────────────────────────────
  
  redis-node-1: &redis-node
    image: redis:7.2-alpine
    restart: unless-stopped
    command: >
      redis-server
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
      --masterauth ${REDIS_PASSWORD}
    volumes:
      - redis_node_1_data:/data
    networks:
      - backend
    ports:
      - "7001:6379"
    deploy:
      resources:
        limits:
          memory: 600M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  redis-node-2:
    <<: *redis-node
    volumes:
      - redis_node_2_data:/data
    ports:
      - "7002:6379"

  redis-node-3:
    <<: *redis-node
    volumes:
      - redis_node_3_data:/data
    ports:
      - "7003:6379"

  redis-node-4:
    <<: *redis-node
    volumes:
      - redis_node_4_data:/data
    ports:
      - "7004:6379"

  redis-node-5:
    <<: *redis-node
    volumes:
      - redis_node_5_data:/data
    ports:
      - "7005:6379"

  redis-node-6:
    <<: *redis-node
    volumes:
      - redis_node_6_data:/data
    ports:
      - "7006:6379"

  # Redis Cluster initialization
  redis-cluster-init:
    image: redis:7.2-alpine
    command: >
      redis-cli --cluster create
      redis-node-1:6379
      redis-node-2:6379
      redis-node-3:6379
      redis-node-4:6379
      redis-node-5:6379
      redis-node-6:6379
      --cluster-replicas 1
      --cluster-yes
      -a ${REDIS_PASSWORD}
    networks:
      - backend
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # ─── APPLICATION SERVICES ───────────────────────────────────────────────

  backend: &backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILD_ENV: production
    image: brain2gain/backend:${TAG:-latest}
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - POSTGRES_SERVER=db-primary
      - POSTGRES_READ_SERVER=db-replica
      - REDIS_CLUSTER_NODES=redis-node-1:6379,redis-node-2:6379,redis-node-3:6379
      - WORKER_PROCESSES=4
      - MAX_CONCURRENT_REQUESTS=1000
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    networks:
      - backend
      - frontend
    depends_on:
      db-primary:
        condition: service_healthy
      redis-node-1:
        condition: service_healthy
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # ─── LOAD BALANCER ──────────────────────────────────────────────────────

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./nginx/optimized-nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/backend.conf:/etc/nginx/conf.d/backend.conf:ro
      - ./nginx/cache:/var/cache/nginx
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ─── MONITORING AND OBSERVABILITY ───────────────────────────────────────

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    ports:
      - "9100:9100"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis-node-1:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - monitoring
      - backend
    ports:
      - "9121:9121"
    depends_on:
      - redis-node-1

  # Postgres Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db-primary:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - monitoring
      - backend
    ports:
      - "9187:9187"
    depends_on:
      db-primary:
        condition: service_healthy

  # ─── LOG AGGREGATION ────────────────────────────────────────────────────

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - logging
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    restart: unless-stopped
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    networks:
      - logging
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - logging
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ─── FRONTEND WITH CDN OPTIMIZATION ─────────────────────────────────────

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
        VITE_API_URL: https://api.${DOMAIN}
        VITE_CDN_URL: https://cdn.${DOMAIN}
    image: brain2gain/frontend:${TAG:-latest}
    restart: unless-stopped
    networks:
      - frontend
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

# ─── NETWORKS ───────────────────────────────────────────────────────────────

networks:
  backend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: brain2gain-backend
    ipam:
      config:
        - subnet: 172.20.0.0/16

  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: brain2gain-frontend
    ipam:
      config:
        - subnet: 172.21.0.0/16

  monitoring:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: brain2gain-monitoring

  logging:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: brain2gain-logging

# ─── VOLUMES ────────────────────────────────────────────────────────────────

volumes:
  postgres_primary_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres/primary

  postgres_replica_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres/replica

  redis_node_1_data:
  redis_node_2_data:
  redis_node_3_data:
  redis_node_4_data:
  redis_node_5_data:
  redis_node_6_data:

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/monitoring/prometheus

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/monitoring/grafana

  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/logging/elasticsearch