# backend/migrations/env.py
from logging.config import fileConfig
import os, sys

from sqlalchemy import engine_from_config, pool
from alembic import context

# 1) Haz que Alembic vea tu paquete app
sys.path.append(os.path.abspath(os.path.join(os.getcwd(), "app")))

# 2) Importa SQLModel y todos tus modelos para registrar metadata
from sqlmodel import SQLModel
# importa aquí cada módulo que defina modelos SQLModel
import models.user
import models.role
import models.product
import models.customer
import models.sales
import models.transaction
import models.stock

# 3) Configura el logging (igual que antes)
config = context.config
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# 4) Apunta target_metadata a la metadata de SQLModel
target_metadata = SQLModel.metadata

# 5) Override de URL vía var de entorno
db_url = os.getenv("DATABASE_URL")
if not db_url:
    raise RuntimeError("Tienes que exportar DATABASE_URL")
# si usas asyncpg, convierte a sync:
sync_url = db_url.replace("+asyncpg", "")
config.set_main_option("sqlalchemy.url", sync_url)

def run_migrations_offline():
    context.configure(
        url=sync_url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )
    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online():
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata
        )
        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

