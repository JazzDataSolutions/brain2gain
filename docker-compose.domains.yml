version: '3.8'

services:
  # === TIENDA FRONTEND (B2C) ===
  tienda-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_APP_MODE=store
        - VITE_API_URL=https://api.brain2gain.com
        - VITE_ENABLE_ADMIN=false
    container_name: brain2gain-tienda-frontend
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - VITE_APP_NAME=Brain2Gain Store
      - VITE_APP_DOMAIN=tienda.brain2gain.com
      - VITE_API_GATEWAY=http://api-gateway:8080
      - VITE_ENABLE_ANALYTICS=true
      - VITE_ENABLE_PWA=true
    networks:
      - brain2gain-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tienda.rule=Host(`tienda.brain2gain.com`)"
      - "traefik.http.routers.tienda.tls=true"
      - "traefik.http.routers.tienda.tls.certresolver=letsencrypt"
      - "traefik.http.services.tienda.loadbalancer.server.port=80"
    depends_on:
      - api-gateway
    restart: unless-stopped

  # === ERP FRONTEND (B2B) ===
  erp-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_APP_MODE=erp
        - VITE_API_URL=https://api.brain2gain.com
        - VITE_ENABLE_STORE=false
    container_name: brain2gain-erp-frontend
    ports:
      - "3001:80"
    environment:
      - NODE_ENV=production
      - VITE_APP_NAME=Brain2Gain ERP
      - VITE_APP_DOMAIN=erp.brain2gain.com
      - VITE_API_GATEWAY=http://api-gateway:8080
      - VITE_REQUIRE_AUTH=true
      - VITE_ENABLE_NOTIFICATIONS=true
    networks:
      - brain2gain-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.erp.rule=Host(`erp.brain2gain.com`)"
      - "traefik.http.routers.erp.tls=true"
      - "traefik.http.routers.erp.tls.certresolver=letsencrypt"
      - "traefik.http.services.erp.loadbalancer.server.port=80"
      - "traefik.http.routers.erp.middlewares=auth-required"
    depends_on:
      - api-gateway
    restart: unless-stopped

  # === API GATEWAY (Kong) ===
  api-gateway:
    image: kong:3.4-alpine
    container_name: brain2gain-api-gateway
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong_password
      - KONG_PG_DATABASE=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-db
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000
    ports:
      - "8080:8000"  # Proxy port
      - "8081:8001"  # Admin port
    networks:
      - brain2gain-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.brain2gain.com`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    depends_on:
      - kong-db
      - kong-migrations
    restart: unless-stopped

  # === KONG DATABASE ===
  kong-db:
    image: postgres:15-alpine
    container_name: brain2gain-kong-db
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kong_password
      - POSTGRES_DB=kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - brain2gain-network
    restart: unless-stopped

  # === KONG MIGRATIONS ===
  kong-migrations:
    image: kong:3.4-alpine
    container_name: brain2gain-kong-migrations
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong_password
      - KONG_PG_DATABASE=kong
    command: kong migrations bootstrap
    networks:
      - brain2gain-network
    depends_on:
      - kong-db
    restart: "no"

  # === BACKEND MICROSERVICES ===
  auth-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: brain2gain-auth-service
    environment:
      - SERVICE_NAME=auth-service
      - DATABASE_URL=postgresql://auth_user:auth_password@auth-db:5432/auth_db
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - API_GATEWAY_URL=http://api-gateway:8000
    ports:
      - "8001:8000"
    networks:
      - brain2gain-network
    depends_on:
      - auth-db
      - redis
    restart: unless-stopped

  product-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: brain2gain-product-service
    environment:
      - SERVICE_NAME=product-service
      - DATABASE_URL=postgresql://product_user:product_password@product-db:5432/product_db
      - REDIS_URL=redis://redis:6379/1
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - API_GATEWAY_URL=http://api-gateway:8000
    ports:
      - "8002:8000"
    networks:
      - brain2gain-network
    depends_on:
      - product-db
      - redis
      - elasticsearch
    restart: unless-stopped

  order-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: brain2gain-order-service
    environment:
      - SERVICE_NAME=order-service
      - DATABASE_URL=postgresql://order_user:order_password@order-db:5432/order_db
      - REDIS_URL=redis://redis:6379/2
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - API_GATEWAY_URL=http://api-gateway:8000
    ports:
      - "8003:8000"
    networks:
      - brain2gain-network
    depends_on:
      - order-db
      - redis
      - rabbitmq
    restart: unless-stopped

  inventory-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: brain2gain-inventory-service
    environment:
      - SERVICE_NAME=inventory-service
      - DATABASE_URL=postgresql://inventory_user:inventory_password@inventory-db:5432/inventory_db
      - REDIS_URL=redis://redis:6379/3
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - API_GATEWAY_URL=http://api-gateway:8000
    ports:
      - "8004:8000"
    networks:
      - brain2gain-network
    depends_on:
      - inventory-db
      - redis
      - rabbitmq
    restart: unless-stopped

  # === SEPARATED DATABASES ===
  auth-db:
    image: postgres:15-alpine
    container_name: brain2gain-auth-db
    environment:
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_password
      - POSTGRES_DB=auth_db
    volumes:
      - auth_data:/var/lib/postgresql/data
    networks:
      - brain2gain-network
    restart: unless-stopped

  product-db:
    image: postgres:15-alpine
    container_name: brain2gain-product-db
    environment:
      - POSTGRES_USER=product_user
      - POSTGRES_PASSWORD=product_password
      - POSTGRES_DB=product_db
    volumes:
      - product_data:/var/lib/postgresql/data
    networks:
      - brain2gain-network
    restart: unless-stopped

  order-db:
    image: postgres:15-alpine
    container_name: brain2gain-order-db
    environment:
      - POSTGRES_USER=order_user
      - POSTGRES_PASSWORD=order_password
      - POSTGRES_DB=order_db
    volumes:
      - order_data:/var/lib/postgresql/data
    networks:
      - brain2gain-network
    restart: unless-stopped

  inventory-db:
    image: postgres:15-alpine
    container_name: brain2gain-inventory-db
    environment:
      - POSTGRES_USER=inventory_user
      - POSTGRES_PASSWORD=inventory_password
      - POSTGRES_DB=inventory_db
    volumes:
      - inventory_data:/var/lib/postgresql/data
    networks:
      - brain2gain-network
    restart: unless-stopped

  # === SHARED SERVICES ===
  redis:
    image: redis:7-alpine
    container_name: brain2gain-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - brain2gain-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: brain2gain-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - brain2gain-network
    restart: unless-stopped

  elasticsearch:
    image: elasticsearch:8.10.0
    container_name: brain2gain-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - brain2gain-network
    restart: unless-stopped

  # === REVERSE PROXY (Traefik) ===
  traefik:
    image: traefik:v3.0
    container_name: brain2gain-traefik
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpsChallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@brain2gain.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "9090:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
    networks:
      - brain2gain-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`admin.brain2gain.com`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
    restart: unless-stopped

volumes:
  kong_data:
  auth_data:
  product_data:
  order_data:
  inventory_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  letsencrypt_data:

networks:
  brain2gain-network:
    driver: bridge