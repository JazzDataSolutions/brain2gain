# Docker Swarm Production Stack Configuration
# Optimized for high availability and scaling
version: '3.8'

services:
  # PostgreSQL Database - Single instance with backup
  postgres:
    image: postgres:17-alpine
    hostname: brain2gain-postgres-{{.Task.Slot}}
    environment:
      POSTGRES_DB: brain2gain_prod
      POSTGRES_USER: brain2gain_prod
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - type: bind
        source: ./database/init-databases.sql
        target: /docker-entrypoint-initdb.d/init-databases.sql
        read_only: true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brain2gain_prod -d brain2gain_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    secrets:
      - postgres_password
    networks:
      - backend_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.postgres == true
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  # Redis Cache - Single instance with persistence
  redis:
    image: redis:7.2-alpine
    hostname: brain2gain-redis-{{.Task.Slot}}
    command: >
      redis-server 
      --appendonly yes 
      --requirepass-file /run/secrets/redis_password
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    secrets:
      - redis_password
    networks:
      - backend_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.redis == true
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Backend API - Multiple replicas for high availability
  backend:
    image: brain2gain/backend:latest
    hostname: brain2gain-backend-{{.Task.Slot}}
    environment:
      - ENVIRONMENT=production
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=brain2gain_prod
      - POSTGRES_USER=brain2gain_prod
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_HOST=https://brain2gain.com
      - BACKEND_CORS_ORIGINS=["https://brain2gain.com","https://www.brain2gain.com","https://api.brain2gain.com"]
      - WORKERS_PER_CORE=2
      - MAX_WORKERS=8
      - WEB_CONCURRENCY=4
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
      - smtp_password
    networks:
      - backend_network
      - frontend_network
    depends_on:
      - postgres
      - redis
    deploy:
      mode: replicated
      replicas: 3
      placement:
        max_replicas_per_node: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  # Frontend - Nginx with React build
  frontend:
    image: brain2gain/frontend:latest
    hostname: brain2gain-frontend-{{.Task.Slot}}
    environment:
      - NODE_ENV=production
    volumes:
      - frontend_logs:/var/log/nginx
      - type: bind
        source: ./nginx/nginx.prod.conf
        target: /etc/nginx/nginx.conf
        read_only: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - frontend_network
    depends_on:
      - backend
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Load Balancer - HAProxy for high availability
  loadbalancer:
    image: haproxy:2.8-alpine
    hostname: brain2gain-lb-{{.Task.Slot}}
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
      - target: 8404
        published: 8404
        protocol: tcp
        mode: ingress
    volumes:
      - type: bind
        source: ./haproxy/haproxy.swarm.cfg
        target: /usr/local/etc/haproxy/haproxy.cfg
        read_only: true
      - type: bind
        source: ./ssl
        target: /etc/ssl/certs
        read_only: true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8404/stats"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - frontend_network
    depends_on:
      - backend
      - frontend
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  # Backup Service - Automated database backups
  backup:
    image: postgres:17-alpine
    hostname: brain2gain-backup-{{.Task.Slot}}
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=brain2gain_prod
      - POSTGRES_USER=brain2gain_prod
    volumes:
      - backup_data:/backups
      - type: bind
        source: ./scripts/backup.sh
        target: /usr/local/bin/backup.sh
        read_only: true
    secrets:
      - postgres_password
    networks:
      - backend_network
    depends_on:
      - postgres
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.backup == true
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 3
    # Run backup every 6 hours
    command: >
      sh -c "
        while true; do
          /usr/local/bin/backup.sh
          sleep 21600
        done
      "

# Docker Swarm Secrets
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  smtp_password:
    file: ./secrets/smtp_password.txt

# Docker Swarm Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/brain2gain/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/brain2gain/data/redis
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/brain2gain/logs/backend
  frontend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/brain2gain/logs/frontend
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/brain2gain/backups

# Docker Swarm Networks
networks:
  backend_network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 10.1.0.0/24
  frontend_network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 10.2.0.0/24