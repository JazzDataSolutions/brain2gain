objective: "Robustecer Brain2Gain corrigiendo README, Dockerfiles y docker-compose; consolidar arquitectura y CI/CD"

phases:
  - id: phase_0_repo_docs
    name: "Repo & Docs Hygiene"
    owner: "Tech Lead"
    tasks:
      - status: "✅"
        id: 0.1
        desc: "Re-escribir README.md: quick-start (dev/prod), diagrama de arquitectura, badges reales de CI y cobertura."
        cmd: |
          vi README.md   # añadir secciones Instalación, Uso en Docker, Guía de Contribución
        expect: "README muestra pasos clon-→run en < 60 s; diagrama PNG en docs/architecture.png enlazado."
        reason: "Primer contacto claro a nuevos devs y reclutadores."
      - status: "✅"
        id: 0.2
        desc: "Crear CONTRIBUTING.md y CODE_OF_CONDUCT.md basados en plantillas OSI."
        cmd: |
          cp docs/templates/CONTRIBUTING.md .
          cp docs/templates/CODE_OF_CONDUCT.md .
        expect: "Workflow de PR definido; linter/test obligatorios antes de merge."
        reason: "Promover colaboración y reducir fricción en revisiones."

  - id: phase_1_revisión_arq_bd
    name: "Revisión y consolidación de Arquitectura y Base de Datos"
    owner: "Tech Lead"
    tasks:
      - status: "✅"
        id: 1.1
        desc: "Unificar variables de conexión a base de datos en `settings.SQLALCHEMY_DATABASE_URI` y eliminar `settings.DATABASE_URL`."
        cmd: "grep -R \"DATABASE_URL\" -n backend/app | xargs sed -i \"s/settings\\.DATABASE_URL/settings.SQLALCHEMY_DATABASE_URI/g\""
        expect: "Todas las referencias a DATABASE_URL reemplazadas; aplicación arranca sin error de conexión."
        reason: "Eliminar duplicidad evita confusión y errores en despliegue."
      - status: "✅"
        id: 1.2
        desc: "Decidir si la capa de datos será 100 % asíncrona. Refactorizar instancias de `Session` a `AsyncSession` o viceversa según decisión."
        cmd: |
          # Ejemplo si se elige async:
          grep -R \"Session\\(\" -n backend/app | xargs sed -i \"s/Session(/AsyncSession(/g\"
          # Verificar importaciones:
          grep -R \"from sqlalchemy.orm import Session\" -n backend/app
        expect: "Todos los servicios usan `AsyncSession`; no hay referencias a sesiones sincrónicas."
        reason: "Evitar mezcla de patrones reduce riesgo de deadlocks. Coherencia en arquitectura."
      - status: "✅"
        id: 1.3
        desc: "Documentar el modelo de datos: generar diagrama ER y agregar al repositorio (archivo `docs/er_diagram.png`)."
        cmd: |
          # Asumiendo uso de dbdiagram.io CLI (si se dispone):
          cat <<EOF > dbdiagram.sql
          ## Diagrama ER de Brain2Gain
          Table users {
            id serial [pk]
            email varchar [unique]
            hashed_password varchar
            role varchar
          }
          Table products {
            product_id serial [pk]
            sku varchar [unique]
            name varchar
            unit_price decimal
            status varchar
          }
          # (continuar definiendo tablas de stock, orders, transactions, etc.)
          EOF
          dbdiagram --input dbdiagram.sql --output docs/er_diagram.png
        expect: "Archivo `docs/er_diagram.png` disponible y referenciado en README."
        reason: "Tener diagrama visual acelera onboarding y previene malentendidos sobre relaciones de tablas."
      - status: "✅"
        id: 1.4
        desc: "Configurar migraciones Alembic correctamente: asegurar que `alembic.ini` use `SQLALCHEMY_DATABASE_URI` y ejecutar `alembic revision --autogenerate`."
        cmd: |
          sed -i \"s/DATABASE_URL/SQLALCHEMY_DATABASE_URI/\" alembic.ini
          alembic revision --autogenerate -m \"Consolidación de rutas BD\"
          alembic upgrade head
        expect: "Migraciones aplicadas sin errores; tablas actualizadas según modelos."
        reason: "Garantizar versionado de esquema previene problemas en despliegues futuros."
      - status: "✅"
        id: 1.5
        desc: "Implementar tests unitarios básicos para `ProductService.create()`, `get_by_id()` y `update_stock()` con Pytest usando contenedor PostgreSQL ephemeral."
        cmd: |
          # Iniciar contenedor de test
          docker run -d --name pg_test_brain2gain -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -e POSTGRES_DB=test_db -p 5433:5432 postgres:13
          # Ejecutar tests (suponiendo que las vars de entorno apunten a postgres://test:test@localhost:5433/test_db)
          pytest backend/app/tests/test_product_service.py
          # Parar contenedor
          docker stop pg_test_brain2gain && docker rm pg_test_brain2gain
        expect: "Tests pasan exitosamente; validaciones de stock funcionan como se espera."
        reason: "Validar lógica de negocio de manera aislada construye confianza y previene regresiones."
      - status: "✅"
        id: 1.6
        desc: "Refactorizar backend/Dockerfile → multi-stage; usar usuario app, uvicorn en prod."
        cmd: |
          vi backend/Dockerfile
          # Stage builder
          FROM python:3.10-slim AS builder
          WORKDIR /app
          COPY pyproject.toml uv.lock .
          RUN pip install uv && uv sync --frozen --compile-bytecode
          COPY app app
          # Stage runtime
          FROM python:3.10-slim
          ENV PYTHONUNBUFFERED=1
          WORKDIR /app
          COPY --from=builder /app /app
          RUN useradd -m app && chown -R app /app
          USER app
          CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
        expect: "Imagen final < 400 MB; contenedor arranca con usuario no-root y sin advertencias."
        reason: "Seguridad + capas cacheables."
      - status: "✅"
        id: 1.7
        desc: "Crear .dockerignore raíz (node_modules, .venv, tests, *.pyc)."
        cmd: |
          cat <<'EOF' > .dockerignore
          **/__pycache__/
          **/*.py[cod]
          **/.pytest_cache/
          node_modules
          frontend/dist
          .venv
          .coverage
          EOF
        expect: "Contexto de build reduce tamaño enviado a Docker < 5 MB."
        reason: "Builds más rápidos y seguros."

  - id: phase_2_api_y_validaciones
    name: "Completar y asegurar APIs con validaciones de negocio y seguridad"
    owner: "Backend Developer"
    tasks:
      - status: "❌"
        id: 2.1
        desc: "Implementar endpoint `GET /api/v1/products/{product_id}` con manejo de 404 y validación de permisos (solo ADMIN/Manager)."
        cmd: |
          # Abrir archivo
          vi backend/app/api/v1/products.py
          # Agregar:
          @router.get("/{product_id}", response_model=ProductRead)
          async def get_product(product_id: int, session: AsyncSession = Depends(get_db), current_user: User = Depends(get_current_admin_user)):
              product = await ProductService(session).get_by_id(product_id)
              if not product:
                  raise HTTPException(status_code=404, detail="Product not found")
              return product
        expect: "Solicitar con token de usuario sin rol ADMIN devuelve 403; con ADMIN devuelve datos o 404 si no existe."
        reason: "Evitar exposición de datos sensibles y reforzar control de acceso."
      - status: "❌"
        id: 2.2
        desc: "Completar CRUD: `PUT` y `DELETE` en `products.py`, con validaciones de rol y verificación de stock antes de actualizar precio o estado."
        cmd: |
          # En products.py:
          @router.put("/{product_id}", response_model=ProductRead)
          async def update_product(product_id: int, payload: ProductUpdate, session: AsyncSession = Depends(get_db), current_user: User: User = Depends(get_current_admin_user)):
              # Lógica: validar payload, llamar a ProductService.update()
              # Si `unit_price` < 0, lanzar 400
              pass
          @router.delete("/{product_id}")
          async def delete_product(product_id: int, session: AsyncSession = Depends(get_db), current_user: User = Depends(get_current_admin_user)):
              # Lógica: ProductService.delete()
              pass
        expect: "UPDATE inválido con precio negativo devuelve 400; operación sin permiso devuelve 403; eliminación limpia registros relacionados."
        reason: "Completar API expone servicio REST robusto y seguro."
      - status: "❌"
        id: 2.3
        desc: "Agregar validaciones de negocio en `ProductService`: impedir creación de producto con `sku` duplicado y `unit_price` menor a `costo_minimo` (si existe)."
        cmd: |
          vi backend/app/services/product_service.py
          # Dentro de create():
          existing = await self.session.exec(select(Product).where(Product.sku == product_data.sku))
          if existing.one_or_none():
              raise ValueError("SKU already exists")
          if product_data.unit_price < Decimal('10.00'):
              raise ValueError("Precio mínimo no alcanzado")
        expect: "Llamar a create() con SKU duplicado lanza excepción; unit_price < 10.00 lanza excepción."
        reason: "Evitar inconsistencias y pérdidas financieras."
      - status: "❌"
        id: 2.4
        desc: "Implementar paginación global: modificar `list_products()` para aceptar `skip` y `limit`, y documentarlo en OpenAPI."
        cmd: |
          vi backend/app/api/v1/products.py
          # Asegurarse que list_products reciba skip, limit
          @router.get("/", response_model=List[ProductRead])
          async def list_products(skip: int = Query(0, ge=0), limit: int = Query(50, ge=1, le=200), session: AsyncSession = Depends(get_db)):
              products = await ProductService(session).list(skip=skip, limit=limit)
              return products
        expect: "GET /api/v1/products?skip=0&limit=50 retorna máximo 50 productos; definir límites evita DoS por solicitudes masivas."
        reason: "Mejorar rendimiento y proteger servidor ante consultas masivas."
      - status: "❌"
        id: 2.5
        desc: "Crear middleware para manejo centralizado de excepciones: capturar ValueError y retornar `HTTPException(400)`, capturar 500 no manejadas y retornar 500 genérico."
        cmd: |
          vi backend/app/main.py
          app = FastAPI()
          @app.exception_handler(ValueError)
          async def value_error_handler(request: Request, exc: ValueError):
              return JSONResponse(status_code=400, content={'detail': str(exc)})
          # (Agregar handler global para Exception)
        expect: "Lanzar ValueError dentro de endpoint devuelve 400 con mensaje; otra excepción devuelve 500 con mensaje genérico."
        reason: "Uniformizar respuestas de error facilita debugging y experiencia de cliente."
      - status: "❌"
        id: 2.6
        desc: "Configurar CORS seguro: permitir sólo dominios específicos (frontend.brain2gain.com) y métodos necesarios."
        cmd: |
          vi backend/app/middleware.py
          from fastapi.middleware.cors import CORSMiddleware
          app.add_middleware(
              CORSMiddleware,
              allow_origins=["https://frontend.brain2gain.com"],
              allow_credentials=True,
              allow_methods=["GET","POST","PUT","DELETE"],
              allow_headers=["Authorization","Content-Type"],
          )
        expect: "Solicitudes desde orígenes no autorizados bloqueadas con 403; frontend funciona correctamente."
        reason: "Restringir CORS previene ataques Cross-Site maliciosos."	
 
  - id: phase_3_frontend_y_ux
    name: "Mejoras de UX/UI, prototipado y tests en Frontend"
    owner: "Frontend Developer"
    tasks:
      - status: "❌"
        id: 3.1
        desc: "Diseñar wireframes para catálogo de productos, carrito y checkout en Figma o una herramienta similar. Exportar mockups a `docs/mockups/`."
        cmd: "mkdir -p docs/mockups && echo 'Wireframes generados en Figma – enlace en `docs/mockups/README.md`.' > docs/mockups/README.md"
        expect: "Repositorio incluye carpeta `docs/mockups/` con enlaces a prototipos de catálogo, carrito y checkout."
        reason: "Visualizar diseño antes de codificar reduce retrabajo y alinea expectativas con stakeholders."
      - status: "❌"
        id: 3.2
        desc: "Implementar sistema de estilos global (design system) usando Tailwind CSS: definir paleta de colores, tipografías y clases utilitarias en `tailwind.config.js`."
        cmd: |
          # Instalar Tailwind
          npm install -D tailwindcss postcss autoprefixer
          npx tailwindcss init -p
          # En tailwind.config.js, definir theme extend según paleta de marca
          sed -i "s|extend: {}|extend: { colors: { primary: '#1a202c', secondary: '#2d3748', accent: '#f6ad55' }, fontSize: { heading: ['2rem','2.5rem'], subheading: ['1.5rem','2rem'], body: ['1rem','1.5rem'] }, spacing: { '2xs': '0.25rem', xs: '0.5rem', sm: '1rem', md: '1.5rem', lg: '2rem' } }|g" tailwind.config.js
        expect: "Funciones de estilo global (clases). Frontend usa clases de Tailwind y respeta paleta de marca."
        reason: "Un design system coherente facilita consistencia visual y velocidad de desarrollo."
      - status: "❌"
        id: 3.3
        desc: "Implementar `AuthContext` en React para guardar el token JWT en `localStorage`, gestionar expiración y refresh token."
        cmd: |
          vi frontend/src/context/AuthContext.tsx
          # Crear contexto con:
          // - login(): almacena JWT
          // - logout(): elimina JWT
          // - checkAuth(): decodificar expiración y refrescar antes de expirar
        expect: "Componentes React pueden usar `useAuth()` para saber si usuario está autenticado; token se refresca antes de expirar."
        reason: "Manejo adecuado de sesiones evita que usuario sea expulsado inesperadamente o que se use token expirado."
      - status: "❌"
        id: 3.4
        desc: "Crear tests de integración en React con React Testing Library: probar flujo de ‘añadir producto al carrito → ver carrito → checkout’."
        cmd: |
          npm install --save-dev @testing-library/react @testing-library/jest-dom jest
          # En frontend/src/__tests__/cartFlow.test.tsx
          # (Escribir test que monte <ProductCatalog />, simule click en ‘Agregar’, y valide que <Cart /> muestre producto)
          npm test -- --watchAll=false
        expect: "Test pasa exitosamente; flujo simulado en ambiente de testing funciona sin fallos."
        reason: "Garantizar robustez de flujo crítico desde el frontend."
      - status: "❌"
        id: 3.5
        desc: "Implementar manejo de errores global en React: componente `<ErrorBoundary>` para capturar errores en renderizado."
        cmd: |
          vi frontend/src/components/ErrorBoundary.tsx
          # Crear clase ErrorBoundary que use componentDidCatch() y muestre mensaje amigable
        expect: "En caso de excepción en cualquier componente hijo, ErrorBoundary captura y muestra UI fallback."
        reason: "Mejorar experiencia de usuario evitando pantallazos en blanco."

      - id: phase_4_devops_ci_cd
        name: "Implementación de CI/CD, Docker optimizado y 
pipelines de test"
        owner: "DevOps Engineer"
        tasks:
          - status: "✅"
            id: 4.1
            desc: "Optimizar Dockerfile de backend: multi-stage, 
usuario no-root, PATH a .venv/bin, tamaño final <400 MB."
            cmd: |
              vi backend/Dockerfile
              # Revisar y aplicar build multi-stage cacheable
              # Incluir ENV PYTHONUNBUFFERED y PATH a .venv/bin
            expect: "Imagen backend <400 MB; build en <2 minutos y 
arranca sin errores."
            reason: "Imágenes ligeras aceleran despliegues y reducen
 costos."
          - status: "✅"
            id: 4.2
            desc: "Crear docker-compose.ci.yml para pipeline CI: 
servicios Postgres, backend y tests; ejecutar suite de Pytest."
            cmd: |
              vi docker-compose.ci.yml
              # Definir servicios pg_ci (Postgres) y backend_ci
              # Montar código, aplicar migraciones y lanzar pytest
            expect: "`docker-compose -f docker-compose.ci.yml up 
--abort-on-container-exit` sale con 0 si tests pasan."
            reason: "Pipeline CI autónomo valida integraciones antes
 de merge."
          - status: "✅"
            id: 4.3
            desc: "Configurar GitHub Actions CI 
(`.github/workflows/ci.yml`): checkout, setup Python, lint, tests y 
reporte de cobertura."
            cmd: |
              mkdir -p .github/workflows
              vi .github/workflows/ci.yml
              # jobs: checkout, setup-python, poetry install, lint 
(flake8/black/ruff), pytest --cov, artifact upload
            expect: "Cada PR dispara CI que falla si hay lint errors
 o tests rotos, y publica badge en README."
            reason: "Automatizar calidad y visibilidad mediante CI."
          - status: "✅"
            id: 4.4
            desc: "Actualizar badges de CI y cobertura en README.md;
 configurar branch protection en GitHub."
            cmd: |
              vi README.md
              # Actualizar URLs de badges de CI y Codecov
              # En GitHub > Settings > Branches: exigir CI green 
antes de merge
            expect: "README muestra badges activos; protegidas ramas
 con status checks."
            reason: "Visibilidad y calidad de merges."
          - status: "✅"
            id: 4.5
            desc: "Planear despliegue en staging y producción; 
documentar en deployment.md e integrar Sentry."
            cmd: |
              vi deployment.md
              # Añadir secciones para staging y producción
              # Incluir configuración de SENTRY_DSN y monitorización
            expect: "deployment.md contiene guías claras de 
despliegue; proyectos Sentry configurados."
            reason: "Preparar entorno robusto y monitorizado para 
producción."


  - id: phase_5_dashboard_y_reporting
    name: "Optimización de reporting, performance y seguridad en Dashboard"
    owner: "Backend Developer"
    tasks:
      - status: "❌"
        id: 5.1
        desc: "Diseñar y crear materialized view en Postgres para reporte de ventas diarias (query sumaria)."
        cmd: |
          psql -h localhost -U brain2gain -d brain2gain_db -c "
          CREATE MATERIALIZED VIEW daily_sales AS
          SELECT
            date_trunc('day', o.created_at) AS sale_date,
            SUM(oi.quantity * oi.unit_price) AS total_revenue,
            COUNT(DISTINCT o.customer_id) AS unique_customers
          FROM orders o
          JOIN order_items oi ON o.order_id = oi.order_id
          GROUP BY 1;"
        expect: "Materialized view `daily_sales` existe y se actualiza periódicamente."
        reason: "Crear estructura pre-agrupada mejora tiempo de consulta en dashboard."
      - status: "❌"
        id: 5.2
        desc: "Implementar endpoint `GET /api/v1/reports/sales-summary` que consuma la materialized view con paginación y filtros por rango de fechas."
        cmd: |
          vi backend/app/api/v1/reports.py
          @router.get("/sales-summary")
          async def sales_summary(start_date: date = Query(...), end_date: date = Query(...), session: AsyncSession = Depends(get_db), current_user: User = Depends(get_current_admin_user)):
              result = await session.execute(
                text(\"\"\"
                SELECT sale_date, total_revenue, unique_customers
                FROM daily_sales
                WHERE sale_date BETWEEN :start_date AND :end_date
                ORDER BY sale_date DESC
                LIMIT 100
                \"\"\"), {"start_date": start_date, "end_date": end_date}
              )
              return result.fetchall()
        expect: "Invocar `/api/v1/reports/sales-summary?start_date=2025-05-01&end_date=2025-05-31` retorna lista paginada de ventas diarias en JSON."
        reason: "API clara y eficiente para consumir datos de dashboard."
      - status: "❌"
        id: 5.3
        desc: "En frontend, integrar Recharts para graficar data de `sales-summary` en `SalesDashboard.tsx` y agregar loaders."
        cmd: |
          vi frontend/src/pages/admin/SalesDashboard.tsx
          # Importar Recharts:
          import { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid } from 'recharts';
          # Realizar fetch a /api/v1/reports/sales-summary y mapear datos.
        expect: "Dashboard muestra gráfico de líneas con fecha vs total_revenue; loader aparece mientras se carga."
        reason: "Visualización clara mejora entendimiento de métricas y facilita decisiones."
      - status: "❌"
        id: 5.4
        desc: "Implementar pruebas de carga para endpoint de reporting con Locust o similar: simular 100 usuarios concurrentes consultando 30 días de datos."
        cmd: |
          # Suponiendo Locust instalado
          vi locustfile.py
          # Escribir script:
          from locust import HttpUser, TaskSet, task, between

          class SalesReportTasks(TaskSet):
              @task
              def get_sales_summary(self):
                  self.client.get("/api/v1/reports/sales-summary?start_date=2025-04-01&end_date=2025-04-30")

          class WebsiteUser(HttpUser):
              tasks = [SalesReportTasks]
              wait_time = between(1, 5)

          # Ejecutar:
          locust -f locustfile.py --headless -u 100 -r 10 --run-time 1m
        expect: "Endpoint maneja 100 usuarios concurrentes sin superar 2 segundos de latency promedio."
        reason: "Asegurar escalabilidad antes de lanzamiento en producción."
      - status: "❌"
        id: 5.5
        desc: "Revisar roles y permisos en Dashboard: asegurar que sólo usuarios con rol `ADMIN` puedan acceder a rutas `/admin/*`."
        cmd: |
          # Backend:
          vi backend/app/api/v1/dependencies.py
          # Crear dependencia:
          async def get_current_admin_user(current_user: User = Depends(get_current_user)):
              if current_user.role != 'ADMIN':
                  raise HTTPException(status_code=403, detail="Not authorized")
              return current_user
          # En rutas admin:
          @router.get("/admin/dashboard", dependencies=[Depends(get_current_admin_user)])
        expect: "Acceso a /admin/dashboard con usuario sin rol ADMIN devuelve 403."
        reason: "Proteger endpoints sensibles contra accesos indebidos."

