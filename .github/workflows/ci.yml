# ============================================================================
# GitHub Actions CI/CD Pipeline for Brain2Gain
# Automated testing, linting, security scanning, and deployment
# ============================================================================

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

# Cancel previous runs when a new push is made
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Python version
  PYTHON_VERSION: "3.11"
  # Node version
  NODE_VERSION: "20"
  # PostgreSQL version for testing
  POSTGRES_VERSION: "17"

jobs:
  # ============================================================================
  # Code Quality and Security Checks
  # ============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: pip install uv

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/pyproject.toml', 'backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install backend dependencies
        working-directory: backend
        run: |
          uv sync --dev
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Commit message lint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npx commitlint --from="${{ github.event.pull_request.base.sha }}" --to="${{ github.event.pull_request.head.sha }}"
          else
            npx commitlint --from="${{ github.event.before }}" --to="${{ github.sha }}"
          fi

      # Backend linting and formatting
      - name: Backend - Ruff linting
        working-directory: backend
        run: ruff check app

      - name: Backend - Ruff formatting
        working-directory: backend
        run: ruff format app --check

      - name: Backend - Type checking (MyPy)
        working-directory: backend
        run: mypy app

      # Frontend linting and formatting
      - name: Frontend - Biome linting
        working-directory: frontend
        run: npm run lint

      # Security scanning
      - name: Backend - Security scan (Safety)
        working-directory: backend
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Frontend - Security audit
        working-directory: frontend
        run: npm audit --audit-level=high
        continue-on-error: true

      # Upload security reports
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            backend/safety-report.json
          retention-days: 30

  # ============================================================================
  # Backend Tests
  # ============================================================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_USER: brain2gain_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: brain2gain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      # Database configuration
      POSTGRES_SERVER: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: brain2gain_test
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: brain2gain_test
      
      # Redis configuration
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      
      # Application configuration
      SECRET_KEY: test-secret-key-for-github-actions
      FIRST_SUPERUSER: test@brain2gain.com
      FIRST_SUPERUSER_PASSWORD: test123456789
      PROJECT_NAME: "Brain2Gain API Test"
      ENVIRONMENT: testing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: pip install uv

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/pyproject.toml', 'backend/uv.lock') }}

      - name: Install dependencies
        working-directory: backend
        run: |
          uv sync --dev
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Run database migrations
        working-directory: backend
        run: alembic upgrade head

      - name: Run tests with coverage
        working-directory: backend
        run: |
          coverage run --source=app -m pytest app/tests/ -v --tb=short --junitxml=pytest-report.xml
          coverage report --show-missing
          coverage xml -o coverage.xml
          coverage html -d coverage_html

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/pytest-report.xml
            backend/coverage.xml
            backend/coverage_html/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # ============================================================================
  # Frontend Tests
  # ============================================================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build application
        working-directory: frontend
        env:
          VITE_API_URL: http://localhost:8000
        run: npm run build

      - name: Run unit tests
        working-directory: frontend
        run: npm run test:run

      - name: Run tests with coverage
        working-directory: frontend
        run: npm run test:coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # ============================================================================
  # E2E Tests
  # ============================================================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run E2E tests with Docker Compose
        run: |
          docker-compose -f docker-compose.ci.yml --profile e2e up --build --abort-on-container-exit
          docker-compose -f docker-compose.ci.yml logs

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 30

  # ============================================================================
  # Build and Security Scanning
  # ============================================================================
  build-and-scan:
    name: Build & Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: brain2gain/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: brain2gain/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL || 'http://localhost:8000' }}

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: brain2gain/backend:${{ github.sha }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: brain2gain/frontend:${{ github.sha }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: '.'

  # ============================================================================
  # Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-and-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.brain2gain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_BACKEND: brain2gain/backend
          ECR_REPOSITORY_FRONTEND: brain2gain/frontend
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          # Build and push backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          
          # Build and push frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./frontend \
            --build-arg VITE_API_URL=${{ secrets.STAGING_API_URL }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG

      - name: Deploy to ECS
        run: |
          echo "Deploying to staging environment..."
          # ECS deployment commands would go here

  # ============================================================================
  # Deploy to Production
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-and-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: https://brain2gain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_BACKEND: brain2gain/backend
          ECR_REPOSITORY_FRONTEND: brain2gain/frontend
          IMAGE_TAG: ${{ github.event.release.tag_name }}
        run: |
          # Build and push backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG ./backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
          
          # Build and push frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./frontend \
            --build-arg VITE_API_URL=${{ secrets.PRODUCTION_API_URL }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest ./frontend \
            --build-arg VITE_API_URL=${{ secrets.PRODUCTION_API_URL }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

      - name: Deploy to ECS
        run: |
          echo "Deploying to production environment..."
          # ECS deployment commands would go here

      - name: Notify Sentry of deployment
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: brain2gain
        with:
          environment: production
          version: ${{ github.event.release.tag_name }}

  # ============================================================================
  # Notification and Cleanup
  # ============================================================================
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests, e2e-tests, build-and-scan]
    if: always()

    steps:
      - name: Notify Slack on success
        if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          text: '✅ CI Pipeline passed for Brain2Gain!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          text: '❌ CI Pipeline failed for Brain2Gain!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}