# ============================================================================
# Enhanced Testing and Coverage Pipeline for Brain2Gain
# Comprehensive testing with detailed coverage reporting and quality gates
# ============================================================================

name: Enhanced Testing & Coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

# Cancel previous runs when a new push is made
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  POSTGRES_VERSION: "17"
  # Coverage thresholds
  BACKEND_COVERAGE_THRESHOLD: 80
  FRONTEND_COVERAGE_THRESHOLD: 75

jobs:
  # ============================================================================
  # Backend Testing with Enhanced Coverage
  # ============================================================================
  backend-testing:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_USER: brain2gain_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: brain2gain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      POSTGRES_SERVER: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: brain2gain_test
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: brain2gain_test
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      SECRET_KEY: test-secret-key-for-enhanced-testing
      FIRST_SUPERUSER: test@brain2gain.com
      FIRST_SUPERUSER_PASSWORD: test123456789
      PROJECT_NAME: "Brain2Gain API Enhanced Test"
      ENVIRONMENT: testing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: pip install uv

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-enhanced-${{ hashFiles('backend/pyproject.toml', 'backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-enhanced-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        working-directory: backend
        run: |
          uv sync --dev
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Run database migrations
        working-directory: backend
        run: alembic upgrade head

      - name: Run unit tests with coverage
        working-directory: backend
        run: |
          pytest app/tests/unit/ -v \
            --cov=app \
            --cov-report=term-missing \
            --cov-report=xml:coverage-unit.xml \
            --cov-report=html:coverage-unit-html \
            --cov-branch \
            --cov-fail-under=${{ env.BACKEND_COVERAGE_THRESHOLD }} \
            --junitxml=pytest-unit-report.xml

      - name: Run integration tests with coverage
        working-directory: backend
        run: |
          pytest app/tests/integration/ -v \
            --cov=app \
            --cov-append \
            --cov-report=term-missing \
            --cov-report=xml:coverage-integration.xml \
            --cov-report=html:coverage-integration-html \
            --cov-branch \
            --junitxml=pytest-integration-report.xml

      - name: Run API tests with coverage
        working-directory: backend
        run: |
          pytest app/tests/api/ -v \
            --cov=app \
            --cov-append \
            --cov-report=term-missing \
            --cov-report=xml:coverage-api.xml \
            --cov-report=html:coverage-api-html \
            --cov-branch \
            --junitxml=pytest-api-report.xml

      - name: Generate combined coverage report
        working-directory: backend
        run: |
          coverage combine
          coverage report --show-missing --fail-under=${{ env.BACKEND_COVERAGE_THRESHOLD }}
          coverage xml -o coverage-combined.xml
          coverage html -d coverage-combined-html --title="Brain2Gain Backend Coverage Report"

      - name: Coverage comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          COVERAGE_PATH: backend/coverage-combined.xml
          MINIMUM_GREEN: ${{ env.BACKEND_COVERAGE_THRESHOLD }}
          MINIMUM_ORANGE: 70

      - name: Upload backend test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/pytest-*-report.xml
            backend/coverage-*.xml
            backend/coverage-*-html/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage-combined.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

  # ============================================================================
  # Frontend Testing with Enhanced Coverage
  # ============================================================================
  frontend-testing:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run linting
        working-directory: frontend
        run: npm run lint

      - name: Build application
        working-directory: frontend
        env:
          VITE_API_URL: http://localhost:8000
        run: npm run build

      - name: Run unit tests with coverage
        working-directory: frontend
        run: |
          npm run test:coverage -- \
            --reporter=verbose \
            --reporter=junit \
            --outputFile.junit=./test-results/junit.xml \
            --coverage.enabled=true \
            --coverage.all=true \
            --coverage.threshold.global.branches=${{ env.FRONTEND_COVERAGE_THRESHOLD }} \
            --coverage.threshold.global.functions=${{ env.FRONTEND_COVERAGE_THRESHOLD }} \
            --coverage.threshold.global.lines=${{ env.FRONTEND_COVERAGE_THRESHOLD }} \
            --coverage.threshold.global.statements=${{ env.FRONTEND_COVERAGE_THRESHOLD }}

      - name: Generate coverage report
        working-directory: frontend
        run: |
          # Generate detailed coverage report
          npx vitest run --coverage --coverage.reporter=html --coverage.reporter=json-summary --coverage.reporter=text

      - name: Check coverage thresholds
        working-directory: frontend
        run: |
          # Check if coverage meets our standards
          node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const threshold = ${{ env.FRONTEND_COVERAGE_THRESHOLD }};
            const metrics = ['lines', 'statements', 'functions', 'branches'];
            
            console.log('Coverage Report:');
            metrics.forEach(metric => {
              const pct = coverage.total[metric].pct;
              const status = pct >= threshold ? '✅' : '❌';
              console.log(\`\${status} \${metric}: \${pct}% (threshold: \${threshold}%)\`);
            });
            
            const failed = metrics.some(metric => coverage.total[metric].pct < threshold);
            if (failed) {
              console.error('Coverage thresholds not met!');
              process.exit(1);
            } else {
              console.log('All coverage thresholds met! 🎉');
            }
          "

      - name: Upload frontend test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/test-results/
            frontend/coverage/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true

  # ============================================================================
  # E2E Testing with Coverage
  # ============================================================================
  e2e-testing:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-testing, frontend-testing]
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d --build
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Health check
          curl -f http://localhost:8000/api/v1/health || exit 1
          curl -f http://localhost:5173 || exit 1

      - name: Run E2E tests
        working-directory: frontend
        run: |
          npx playwright test \
            --reporter=html \
            --reporter=junit:test-results/e2e-results.xml

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 30

  # ============================================================================
  # Performance Testing
  # ============================================================================
  performance-testing:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-testing]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        working-directory: backend
        run: |
          uv sync --dev
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Run performance tests
        working-directory: backend
        run: |
          pytest app/tests/performance/ -v \
            --benchmark-only \
            --benchmark-json=performance-results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: backend/performance-results.json
          retention-days: 30

  # ============================================================================
  # Security Testing
  # ============================================================================
  security-testing:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [backend-testing, frontend-testing]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        working-directory: backend
        run: |
          uv sync --dev
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Run security tests
        working-directory: backend
        run: |
          pytest app/tests/security/ -v \
            --junitxml=security-test-results.xml

      - name: Run Bandit security scan
        working-directory: backend
        run: |
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Run Safety check
        working-directory: backend
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-results
          path: |
            backend/security-test-results.xml
            backend/bandit-report.json
            backend/safety-report.json
          retention-days: 30

  # ============================================================================
  # Coverage Analysis and Reporting
  # ============================================================================
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [backend-testing, frontend-testing]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend test results
        uses: actions/download-artifact@v3
        with:
          name: backend-test-results
          path: backend-results

      - name: Download frontend test results
        uses: actions/download-artifact@v3
        with:
          name: frontend-test-results
          path: frontend-results

      - name: Generate coverage summary
        run: |
          echo "# 📊 Test Coverage Summary" > coverage-summary.md
          echo "" >> coverage-summary.md
          
          # Backend coverage
          if [ -f "backend-results/coverage-combined.xml" ]; then
            echo "## Backend Coverage" >> coverage-summary.md
            echo "\`\`\`" >> coverage-summary.md
            grep -E "line-rate|branch-rate" backend-results/coverage-combined.xml | head -1 >> coverage-summary.md
            echo "\`\`\`" >> coverage-summary.md
            echo "" >> coverage-summary.md
          fi
          
          # Frontend coverage
          if [ -f "frontend-results/coverage/coverage-summary.json" ]; then
            echo "## Frontend Coverage" >> coverage-summary.md
            echo "\`\`\`json" >> coverage-summary.md
            cat frontend-results/coverage/coverage-summary.json >> coverage-summary.md
            echo "\`\`\`" >> coverage-summary.md
          fi

      - name: Upload coverage summary
        uses: actions/upload-artifact@v3
        with:
          name: coverage-summary
          path: coverage-summary.md
          retention-days: 30

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './coverage-summary.md';
            
            if (fs.existsSync(path)) {
              const coverage = fs.readFileSync(path, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: coverage
              });
            }

  # ============================================================================
  # Quality Gate
  # ============================================================================
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-testing, frontend-testing, e2e-testing, security-testing]
    if: always()

    steps:
      - name: Check quality criteria
        run: |
          echo "🔍 Evaluating quality criteria..."
          
          # Check if all required jobs passed
          BACKEND_STATUS="${{ needs.backend-testing.result }}"
          FRONTEND_STATUS="${{ needs.frontend-testing.result }}"
          E2E_STATUS="${{ needs.e2e-testing.result }}"
          SECURITY_STATUS="${{ needs.security-testing.result }}"
          
          echo "Backend tests: $BACKEND_STATUS"
          echo "Frontend tests: $FRONTEND_STATUS"
          echo "E2E tests: $E2E_STATUS"
          echo "Security tests: $SECURITY_STATUS"
          
          # Determine overall status
          if [ "$BACKEND_STATUS" = "success" ] && [ "$FRONTEND_STATUS" = "success" ] && [ "$E2E_STATUS" = "success" ] && [ "$SECURITY_STATUS" = "success" ]; then
            echo "✅ All quality gates passed!"
            exit 0
          else
            echo "❌ Quality gate failed!"
            exit 1
          fi

      - name: Update commit status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const state = '${{ needs.backend-testing.result }}' === 'success' && 
                         '${{ needs.frontend-testing.result }}' === 'success' && 
                         '${{ needs.e2e-testing.result }}' === 'success' && 
                         '${{ needs.security-testing.result }}' === 'success' ? 'success' : 'failure';
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: state === 'success' ? 'All quality gates passed' : 'Quality gate failed',
              context: 'Enhanced Testing Pipeline'
            });