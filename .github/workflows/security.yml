# ============================================================================
# Security and Dependency Management Workflow
# Automated security scanning and dependency updates
# ============================================================================

name: Security & Dependencies

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
  pull_request:
    paths:
      - 'backend/pyproject.toml'
      - 'backend/uv.lock'
      - 'frontend/package*.json'

jobs:
  # ============================================================================
  # Dependency Security Audit
  # ============================================================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install UV
        run: pip install uv

      - name: Install backend dependencies
        working-directory: backend
        run: uv sync --dev

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      # Python security audit
      - name: Python security audit with Safety
        working-directory: backend
        run: |
          pip install safety
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Python security audit with pip-audit
        working-directory: backend
        run: |
          pip install pip-audit
          pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

      # Node.js security audit
      - name: Node.js security audit
        working-directory: frontend
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json
        continue-on-error: true

      # SAST scanning with CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # Upload security reports
      - name: Upload security artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ github.sha }}
          path: |
            backend/safety-report.json
            backend/pip-audit-report.json
            frontend/npm-audit-report.json
          retention-days: 90

      # Create GitHub issue for critical vulnerabilities
      - name: Check for critical vulnerabilities
        id: check-vulns
        run: |
          CRITICAL_FOUND=false
          
          # Check Python vulnerabilities
          if [ -f backend/safety-report.json ]; then
            if jq -e '.vulnerabilities | length > 0' backend/safety-report.json > /dev/null; then
              CRITICAL_FOUND=true
            fi
          fi
          
          # Check Node.js vulnerabilities
          if [ -f frontend/npm-audit-report.json ]; then
            if jq -e '.metadata.vulnerabilities.critical > 0 or .metadata.vulnerabilities.high > 0' frontend/npm-audit-report.json > /dev/null; then
              CRITICAL_FOUND=true
            fi
          fi
          
          echo "critical_found=$CRITICAL_FOUND" >> $GITHUB_OUTPUT

      - name: Create security issue
        if: steps.check-vulns.outputs.critical_found == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const title = `üö® Critical Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Alert
            
            Critical or high-severity vulnerabilities have been detected in the dependencies.
            
            ### Action Required
            - [ ] Review the security reports in the [workflow artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - [ ] Update vulnerable dependencies
            - [ ] Test the application thoroughly after updates
            - [ ] Deploy security patches
            
            ### Reports Available
            - Python dependencies: safety-report.json, pip-audit-report.json
            - Node.js dependencies: npm-audit-report.json
            
            **Priority: HIGH** üî¥
            
            Auto-generated by security workflow.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'dependencies']
            });

  # ============================================================================
  # Dependency Updates Check
  # ============================================================================
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install UV
        run: pip install uv

      - name: Check Python dependency updates
        working-directory: backend
        run: |
          echo "Checking for Python dependency updates..."
          uv pip list --outdated > python-updates.txt || true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check Node.js dependency updates
        working-directory: frontend
        run: |
          echo "Checking for Node.js dependency updates..."
          npm outdated > nodejs-updates.txt || true

      - name: Upload update reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-updates-${{ github.sha }}
          path: |
            backend/python-updates.txt
            frontend/nodejs-updates.txt
          retention-days: 30

  # ============================================================================
  # License Compliance Check
  # ============================================================================
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install UV
        run: pip install uv

      - name: Install backend dependencies
        working-directory: backend
        run: uv sync

      - name: Check Python licenses
        working-directory: backend
        run: |
          pip install pip-licenses
          pip-licenses --format=json --output-file=python-licenses.json
          pip-licenses --format=csv --output-file=python-licenses.csv

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check Node.js licenses
        working-directory: frontend
        run: |
          npm install
          license-checker --json --out nodejs-licenses.json
          license-checker --csv --out nodejs-licenses.csv

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports-${{ github.sha }}
          path: |
            backend/python-licenses.*
            frontend/nodejs-licenses.*
          retention-days: 90

      # Check for prohibited licenses
      - name: Check for prohibited licenses
        run: |
          PROHIBITED_LICENSES=("GPL-3.0" "AGPL-3.0" "LGPL-3.0")
          VIOLATIONS_FOUND=false
          
          # Check Python licenses
          if [ -f backend/python-licenses.json ]; then
            for license in "${PROHIBITED_LICENSES[@]}"; do
              if jq -r '.[].License' backend/python-licenses.json | grep -q "$license"; then
                echo "‚ùå Prohibited license found: $license in Python dependencies"
                VIOLATIONS_FOUND=true
              fi
            done
          fi
          
          # Check Node.js licenses
          if [ -f frontend/nodejs-licenses.json ]; then
            for license in "${PROHIBITED_LICENSES[@]}"; do
              if jq -r '.[] | select(.licenses != null) | .licenses' frontend/nodejs-licenses.json | grep -q "$license"; then
                echo "‚ùå Prohibited license found: $license in Node.js dependencies"
                VIOLATIONS_FOUND=true
              fi
            done
          fi
          
          if [ "$VIOLATIONS_FOUND" = true ]; then
            echo "License compliance check failed!"
            exit 1
          else
            echo "‚úÖ All licenses are compliant"
          fi

  # ============================================================================
  # Docker Image Security Scan
  # ============================================================================
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: brain2gain/backend:scan
          load: true

      - name: Build frontend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: brain2gain/frontend:scan
          load: true
          build-args: |
            VITE_API_URL=http://localhost:8000

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'brain2gain/backend:scan'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'brain2gain/frontend:scan'
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: '.'

      - name: Run Anchore container scan
        uses: anchore/scan-action@v3
        with:
          image: 'brain2gain/backend:scan'
          format: 'sarif'
          output-file: 'backend-anchore-results.sarif'

      - name: Upload Anchore scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'backend-anchore-results.sarif'