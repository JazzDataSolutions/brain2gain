# Production Environment - Full Stack Deployment
# For production deployment with load balancing and scaling
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: brain2gain-postgres-prod
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: brain2gain_prod
      POSTGRES_USER: brain2gain_prod
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brain2gain_prod -d brain2gain_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    secrets:
      - postgres_password
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: brain2gain-redis-prod
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass-file /run/secrets/redis_password
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    secrets:
      - redis_password
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: brain2gain-backend-prod
    restart: always
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=brain2gain_prod
      - POSTGRES_USER=brain2gain_prod
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_HOST=https://brain2gain.com
      - BACKEND_CORS_ORIGINS=["https://brain2gain.com","https://www.brain2gain.com"]
    volumes:
      - ./backend/app:/app/app:ro
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
      - smtp_password
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: brain2gain-frontend-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.brain2gain.com
      - VITE_FRONTEND_URL=https://brain2gain.com
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - frontend_logs:/var/log/nginx
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  # Load Balancer (HAProxy)
  loadbalancer:
    image: haproxy:2.8-alpine
    container_name: brain2gain-loadbalancer
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # HAProxy stats
    volumes:
      - ./haproxy/haproxy.prod.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8404/stats"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
      placement:
        constraints:
          - node.role == manager

# Docker Secrets for production security
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  smtp_password:
    file: ./secrets/smtp_password.txt

# Persistent volumes
volumes:
  postgres_prod_data:
    name: brain2gain_postgres_prod_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/brain2gain/data/postgres
  redis_prod_data:
    name: brain2gain_redis_prod_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/brain2gain/data/redis
  backend_logs:
    name: brain2gain_backend_logs
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/brain2gain/logs/backend
  frontend_logs:
    name: brain2gain_frontend_logs
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/brain2gain/logs/frontend

# Production network configuration
networks:
  default:
    name: brain2gain_prod_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16