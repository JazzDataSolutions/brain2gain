# =====================================================================
# Brain2Gain Production Environment
# =====================================================================
# Secure production setup with Docker Secrets
# Usage: docker compose -f docker-compose.prod.yml up -d
# Requires: secrets/ directory with secure credential files
# =====================================================================

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: brain2gain-postgres-prod
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-brain2gain_prod}
      POSTGRES_USER: ${POSTGRES_USER:-brain2gain_prod}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-brain2gain_prod} -d ${POSTGRES_DB:-brain2gain_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    secrets:
      - postgres_password
    networks:
      - brain2gain-prod-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: brain2gain-redis-prod
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass $(cat /run/secrets/redis_password)
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    secrets:
      - redis_password
    networks:
      - brain2gain-prod-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: brain2gain-backend-prod
    restart: always
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - PROJECT_NAME=${PROJECT_NAME:-Brain2Gain Production}
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-brain2gain_prod}
      - POSTGRES_USER=${POSTGRES_USER:-brain2gain_prod}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_HOST=${FRONTEND_HOST:-https://brain2gain.mx}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-["https://brain2gain.mx","https://www.brain2gain.mx","https://api.brain2gain.mx"]}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_TLS=${SMTP_TLS:-true}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:-admin@brain2gain.mx}
    volumes:
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
      - secret_key
      - smtp_password
      - superuser_password
    networks:
      - brain2gain-prod-network

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
        - VITE_API_URL=${VITE_API_URL:-https://api.brain2gain.mx}
        - VITE_FRONTEND_URL=${VITE_FRONTEND_URL:-https://brain2gain.mx}
    container_name: brain2gain-frontend-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL:-https://api.brain2gain.mx}
      - VITE_FRONTEND_URL=${VITE_FRONTEND_URL:-https://brain2gain.mx}
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - frontend_logs:/var/log/nginx
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - brain2gain-prod-network

# Docker volumes for persistent data
volumes:
  postgres_prod_data:
    name: brain2gain_postgres_prod_data
  redis_prod_data:
    name: brain2gain_redis_prod_data
  frontend_logs:
    name: brain2gain_frontend_logs
  backend_logs:
    name: brain2gain_backend_logs

# Docker networks
networks:
  brain2gain-prod-network:
    name: brain2gain-prod-network
    driver: bridge

# Docker secrets for secure credential management
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  secret_key:
    file: ./secrets/secret_key.txt
  smtp_password:
    file: ./secrets/smtp_password.txt
  superuser_password:
    file: ./secrets/superuser_password.txt
